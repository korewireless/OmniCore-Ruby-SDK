=begin
#OmniCore Model and State Management API

#This is an OmniCore Model and State Management server.

The version of the OpenAPI document: 1.8.5
Contact: omnicoresupport@korewireless.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0-SNAPSHOT

=end

require 'cgi'

module OmniCoreClient
  class DeviceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bind  a device to a gateway under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param bind [BindRequest] application/json
    # @param [Hash] opts the optional parameters
    # @return [Info]
    def bind_device(subscription_id, registry_id, bind, opts = {})
      data, _status_code, _headers = bind_device_with_http_info(subscription_id, registry_id, bind, opts)
      data
    end

    # Bind  a device to a gateway under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param bind [BindRequest] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(Info, Integer, Hash)>] Info data, response status code and response headers
    def bind_device_with_http_info(subscription_id, registry_id, bind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.bind_device ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DeviceApi.bind_device"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.bind_device"
      end
      # verify the required parameter 'bind' is set
      if @api_client.config.client_side_validation && bind.nil?
        fail ArgumentError, "Missing the required parameter 'bind' when calling DeviceApi.bind_device"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionId}/registries/{registryId}/bindDeviceToGateway'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bind)

      # return_type
      return_type = opts[:debug_return_type] || 'Info'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.bind_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#bind_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bind devices to a gateway under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param bind [BindRequestIdsGateway] application/json
    # @param [Hash] opts the optional parameters
    # @return [Info]
    def bind_devices(subscription_id, registry_id, bind, opts = {})
      data, _status_code, _headers = bind_devices_with_http_info(subscription_id, registry_id, bind, opts)
      data
    end

    # Bind devices to a gateway under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param bind [BindRequestIdsGateway] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(Info, Integer, Hash)>] Info data, response status code and response headers
    def bind_devices_with_http_info(subscription_id, registry_id, bind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.bind_devices ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DeviceApi.bind_devices"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.bind_devices"
      end
      # verify the required parameter 'bind' is set
      if @api_client.config.client_side_validation && bind.nil?
        fail ArgumentError, "Missing the required parameter 'bind' when calling DeviceApi.bind_devices"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionId}/registries/{registryId}/bindDevicesToGateway'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(bind)

      # return_type
      return_type = opts[:debug_return_type] || 'Info'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.bind_devices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#bind_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Blocks All Communication From A Device
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param block [BlockCommunicationBody] application/json
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def block_device_communcation(subscriptionid, registry_id, device_id, block, opts = {})
      data, _status_code, _headers = block_device_communcation_with_http_info(subscriptionid, registry_id, device_id, block, opts)
      data
    end

    # Blocks All Communication From A Device
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param block [BlockCommunicationBody] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def block_device_communcation_with_http_info(subscriptionid, registry_id, device_id, block, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.block_device_communcation ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling DeviceApi.block_device_communcation"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.block_device_communcation"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceApi.block_device_communcation"
      end
      # verify the required parameter 'block' is set
      if @api_client.config.client_side_validation && block.nil?
        fail ArgumentError, "Missing the required parameter 'block' when calling DeviceApi.block_device_communcation"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/communication'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(block)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.block_device_communcation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#block_device_communcation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a device under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device [Device] application/json
    # @param [Hash] opts the optional parameters
    # @return [Device]
    def create_device(subscription_id, registry_id, device, opts = {})
      data, _status_code, _headers = create_device_with_http_info(subscription_id, registry_id, device, opts)
      data
    end

    # Create a device under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device [Device] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(Device, Integer, Hash)>] Device data, response status code and response headers
    def create_device_with_http_info(subscription_id, registry_id, device, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.create_device ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DeviceApi.create_device"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.create_device"
      end
      # verify the required parameter 'device' is set
      if @api_client.config.client_side_validation && device.nil?
        fail ArgumentError, "Missing the required parameter 'device' when calling DeviceApi.create_device"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionId}/registries/{registryId}/devices'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(device)

      # return_type
      return_type = opts[:debug_return_type] || 'Device'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.create_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#create_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a device under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_device(subscription_id, registry_id, device_id, opts = {})
      data, _status_code, _headers = delete_device_with_http_info(subscription_id, registry_id, device_id, opts)
      data
    end

    # Delete a device under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_device_with_http_info(subscription_id, registry_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.delete_device ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DeviceApi.delete_device"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.delete_device"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceApi.delete_device"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionId}/registries/{registryId}/devices/{deviceId}'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.delete_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#delete_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Configs Of Devices
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :num_versions The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available.
    # @return [ListDeviceConfigVersionsResponse]
    def get_config(subscriptionid, registry_id, device_id, opts = {})
      data, _status_code, _headers = get_config_with_http_info(subscriptionid, registry_id, device_id, opts)
      data
    end

    # Get Configs Of Devices
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :num_versions The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available.
    # @return [Array<(ListDeviceConfigVersionsResponse, Integer, Hash)>] ListDeviceConfigVersionsResponse data, response status code and response headers
    def get_config_with_http_info(subscriptionid, registry_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.get_config ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling DeviceApi.get_config"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.get_config"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceApi.get_config"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/configVersions'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'numVersions'] = opts[:'num_versions'] if !opts[:'num_versions'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListDeviceConfigVersionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.get_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#get_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a device under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param [Hash] opts the optional parameters
    # @return [Device]
    def get_device(subscription_id, registry_id, device_id, opts = {})
      data, _status_code, _headers = get_device_with_http_info(subscription_id, registry_id, device_id, opts)
      data
    end

    # Get a device under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Device, Integer, Hash)>] Device data, response status code and response headers
    def get_device_with_http_info(subscription_id, registry_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.get_device ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DeviceApi.get_device"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.get_device"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceApi.get_device"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionId}/registries/{registryId}/devices/{deviceId}'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Device'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.get_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#get_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all devices under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page Number
    # @option opts [Integer] :page_size The maximum number of devices to return in the response. If this value is zero, the service will select a default size. 
    # @option opts [String] :field_mask The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example: 
    # @option opts [Array<String>] :device_ids A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000
    # @option opts [Array<String>] :device_num_ids A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000.
    # @option opts [String] :gateway_list_options_associations_device_id If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound.
    # @option opts [String] :gateway_list_options_associations_gateway_id If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned
    # @option opts [String] :gateway_list_options_gateway_type If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned.
    # @return [ListDevicesResponse]
    def get_devices(subscription_id, registry_id, opts = {})
      data, _status_code, _headers = get_devices_with_http_info(subscription_id, registry_id, opts)
      data
    end

    # Get all devices under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page Number
    # @option opts [Integer] :page_size The maximum number of devices to return in the response. If this value is zero, the service will select a default size. 
    # @option opts [String] :field_mask The fields of the Device resource to be returned to the response. The fields id and numId are always returned, along with any other fields specified. A comma-separated list of fully qualified names of fields. Example: 
    # @option opts [Array<String>] :device_ids A list of device string IDs. For example, [&#39;device0&#39;, &#39;device12&#39;]. If empty, this field is ignored. Maximum IDs: 10,000
    # @option opts [Array<String>] :device_num_ids A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000.
    # @option opts [String] :gateway_list_options_associations_device_id If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (num_id) or the user-defined string (id). For example, if 456 is specified, returns only the gateways to which the device with num_id 456 is bound.
    # @option opts [String] :gateway_list_options_associations_gateway_id If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (num_id) or the user-defined string (id). For example, if 123 is specified, only devices bound to the gateway with num_id 123 are returned
    # @option opts [String] :gateway_list_options_gateway_type If GATEWAY is specified, only gateways are returned. If NON_GATEWAY is specified, only non-gateway devices are returned. If GATEWAY_TYPE_UNSPECIFIED is specified, all devices are returned.
    # @return [Array<(ListDevicesResponse, Integer, Hash)>] ListDevicesResponse data, response status code and response headers
    def get_devices_with_http_info(subscription_id, registry_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.get_devices ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DeviceApi.get_devices"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.get_devices"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionId}/registries/{registryId}/devices'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'fieldMask'] = opts[:'field_mask'] if !opts[:'field_mask'].nil?
      query_params[:'deviceIds'] = @api_client.build_collection_param(opts[:'device_ids'], :csv) if !opts[:'device_ids'].nil?
      query_params[:'deviceNumIds'] = @api_client.build_collection_param(opts[:'device_num_ids'], :csv) if !opts[:'device_num_ids'].nil?
      query_params[:'gatewayListOptions.associationsDeviceId'] = opts[:'gateway_list_options_associations_device_id'] if !opts[:'gateway_list_options_associations_device_id'].nil?
      query_params[:'gatewayListOptions.associationsGatewayId'] = opts[:'gateway_list_options_associations_gateway_id'] if !opts[:'gateway_list_options_associations_gateway_id'].nil?
      query_params[:'gatewayListOptions.gatewayType'] = opts[:'gateway_list_options_gateway_type'] if !opts[:'gateway_list_options_gateway_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListDevicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.get_devices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#get_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get States Of Devices
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :num_states The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available.
    # @return [ListDeviceStatesResponse]
    def get_states(subscriptionid, registry_id, device_id, opts = {})
      data, _status_code, _headers = get_states_with_http_info(subscriptionid, registry_id, device_id, opts)
      data
    end

    # Get States Of Devices
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :num_states The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available.
    # @return [Array<(ListDeviceStatesResponse, Integer, Hash)>] ListDeviceStatesResponse data, response status code and response headers
    def get_states_with_http_info(subscriptionid, registry_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.get_states ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling DeviceApi.get_states"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.get_states"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceApi.get_states"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/states'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'numStates'] = opts[:'num_states'] if !opts[:'num_states'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListDeviceStatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.get_states",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#get_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send A Command To A Device
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param command [DeviceCommand] application/json
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def send_command_to_device(subscriptionid, registry_id, device_id, command, opts = {})
      data, _status_code, _headers = send_command_to_device_with_http_info(subscriptionid, registry_id, device_id, command, opts)
      data
    end

    # Send A Command To A Device
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param command [DeviceCommand] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def send_command_to_device_with_http_info(subscriptionid, registry_id, device_id, command, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.send_command_to_device ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling DeviceApi.send_command_to_device"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.send_command_to_device"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceApi.send_command_to_device"
      end
      # verify the required parameter 'command' is set
      if @api_client.config.client_side_validation && command.nil?
        fail ArgumentError, "Missing the required parameter 'command' when calling DeviceApi.send_command_to_device"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/sendCommandToDevice'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(command)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.send_command_to_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#send_command_to_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # UnBind  a device from a gateway under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param unbind [BindRequest] application/json
    # @param [Hash] opts the optional parameters
    # @return [Info]
    def un_bind_device(subscription_id, registry_id, unbind, opts = {})
      data, _status_code, _headers = un_bind_device_with_http_info(subscription_id, registry_id, unbind, opts)
      data
    end

    # UnBind  a device from a gateway under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param unbind [BindRequest] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(Info, Integer, Hash)>] Info data, response status code and response headers
    def un_bind_device_with_http_info(subscription_id, registry_id, unbind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.un_bind_device ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DeviceApi.un_bind_device"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.un_bind_device"
      end
      # verify the required parameter 'unbind' is set
      if @api_client.config.client_side_validation && unbind.nil?
        fail ArgumentError, "Missing the required parameter 'unbind' when calling DeviceApi.un_bind_device"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionId}/registries/{registryId}/unbindDeviceFromGateway'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unbind)

      # return_type
      return_type = opts[:debug_return_type] || 'Info'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.un_bind_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#un_bind_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # UnBind devices from a gateway under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param unbind [BindRequestIdsGateway] application/json
    # @param [Hash] opts the optional parameters
    # @return [Info]
    def un_bind_devices(subscription_id, registry_id, unbind, opts = {})
      data, _status_code, _headers = un_bind_devices_with_http_info(subscription_id, registry_id, unbind, opts)
      data
    end

    # UnBind devices from a gateway under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param unbind [BindRequestIdsGateway] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(Info, Integer, Hash)>] Info data, response status code and response headers
    def un_bind_devices_with_http_info(subscription_id, registry_id, unbind, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.un_bind_devices ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DeviceApi.un_bind_devices"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.un_bind_devices"
      end
      # verify the required parameter 'unbind' is set
      if @api_client.config.client_side_validation && unbind.nil?
        fail ArgumentError, "Missing the required parameter 'unbind' when calling DeviceApi.un_bind_devices"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionId}/registries/{registryId}/unbindDevicesFromGateway'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(unbind)

      # return_type
      return_type = opts[:debug_return_type] || 'Info'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.un_bind_devices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#un_bind_devices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update A Configuration Of A Device
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param configuration [DeviceConfiguration] application/json
    # @param [Hash] opts the optional parameters
    # @return [DeviceConfig]
    def update_configuration_to_device(subscriptionid, registry_id, device_id, configuration, opts = {})
      data, _status_code, _headers = update_configuration_to_device_with_http_info(subscriptionid, registry_id, device_id, configuration, opts)
      data
    end

    # Update A Configuration Of A Device
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param configuration [DeviceConfiguration] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceConfig, Integer, Hash)>] DeviceConfig data, response status code and response headers
    def update_configuration_to_device_with_http_info(subscriptionid, registry_id, device_id, configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.update_configuration_to_device ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling DeviceApi.update_configuration_to_device"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.update_configuration_to_device"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceApi.update_configuration_to_device"
      end
      # verify the required parameter 'configuration' is set
      if @api_client.config.client_side_validation && configuration.nil?
        fail ArgumentError, "Missing the required parameter 'configuration' when calling DeviceApi.update_configuration_to_device"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/updateConfigurationToDevice'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(configuration)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.update_configuration_to_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#update_configuration_to_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Approve/Reject a Custom Onboard Request
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param custom_onboard [CustomOnboard] application/json
    # @param [Hash] opts the optional parameters
    # @return [Info]
    def update_custom_onboard_request(subscriptionid, registry_id, device_id, custom_onboard, opts = {})
      data, _status_code, _headers = update_custom_onboard_request_with_http_info(subscriptionid, registry_id, device_id, custom_onboard, opts)
      data
    end

    # Approve/Reject a Custom Onboard Request
    # @param subscriptionid [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param custom_onboard [CustomOnboard] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(Info, Integer, Hash)>] Info data, response status code and response headers
    def update_custom_onboard_request_with_http_info(subscriptionid, registry_id, device_id, custom_onboard, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.update_custom_onboard_request ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling DeviceApi.update_custom_onboard_request"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.update_custom_onboard_request"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceApi.update_custom_onboard_request"
      end
      # verify the required parameter 'custom_onboard' is set
      if @api_client.config.client_side_validation && custom_onboard.nil?
        fail ArgumentError, "Missing the required parameter 'custom_onboard' when calling DeviceApi.update_custom_onboard_request"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionid}/registries/{registryId}/devices/{deviceId}/updateCustomOnboardRequest'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(custom_onboard)

      # return_type
      return_type = opts[:debug_return_type] || 'Info'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.update_custom_onboard_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#update_custom_onboard_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify device under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param update_mask [String] Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata
    # @param device [Device] application/json
    # @param [Hash] opts the optional parameters
    # @return [Device]
    def update_device(subscription_id, registry_id, device_id, update_mask, device, opts = {})
      data, _status_code, _headers = update_device_with_http_info(subscription_id, registry_id, device_id, update_mask, device, opts)
      data
    end

    # Modify device under a registry
    # @param subscription_id [String] Subscription ID
    # @param registry_id [String] Registry ID
    # @param device_id [String] Device ID
    # @param update_mask [String] Required. Only updates the device fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: credentials,logLevel, blocked,policy and metadata
    # @param device [Device] application/json
    # @param [Hash] opts the optional parameters
    # @return [Array<(Device, Integer, Hash)>] Device data, response status code and response headers
    def update_device_with_http_info(subscription_id, registry_id, device_id, update_mask, device, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceApi.update_device ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling DeviceApi.update_device"
      end
      # verify the required parameter 'registry_id' is set
      if @api_client.config.client_side_validation && registry_id.nil?
        fail ArgumentError, "Missing the required parameter 'registry_id' when calling DeviceApi.update_device"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceApi.update_device"
      end
      # verify the required parameter 'update_mask' is set
      if @api_client.config.client_side_validation && update_mask.nil?
        fail ArgumentError, "Missing the required parameter 'update_mask' when calling DeviceApi.update_device"
      end
      # verify enum value
      allowable_values = ["logLevel", "blocked", "metadata", "credentials", "gatewayConfig.gatewayAuthMethod", "policy"]
      if @api_client.config.client_side_validation && !allowable_values.include?(update_mask)
        fail ArgumentError, "invalid value for \"update_mask\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'device' is set
      if @api_client.config.client_side_validation && device.nil?
        fail ArgumentError, "Missing the required parameter 'device' when calling DeviceApi.update_device"
      end
      # resource path
      local_var_path = '/omnicore/subscriptions/{subscriptionId}/registries/{registryId}/devices/{deviceId}'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s)).sub('{' + 'registryId' + '}', CGI.escape(registry_id.to_s)).sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'updateMask'] = update_mask

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(device)

      # return_type
      return_type = opts[:debug_return_type] || 'Device'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"DeviceApi.update_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceApi#update_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
