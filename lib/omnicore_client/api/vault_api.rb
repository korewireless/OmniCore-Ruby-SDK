=begin
#OmniCore Model and State Management API

#This is an OmniCore Model and State Management server.

The version of the OpenAPI document: 1.8.10
Contact: omnicoresupport@korewireless.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0-SNAPSHOT

=end

require 'cgi'

module OmniCoreClient
  class VaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create vault configuration
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateConfiguration] :create_configuration application/json
    # @return [Frame]
    def create_vault_configuration(subscriptionid, opts = {})
      data, _status_code, _headers = create_vault_configuration_with_http_info(subscriptionid, opts)
      data
    end

    # create vault configuration
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateConfiguration] :create_configuration application/json
    # @return [Array<(Frame, Integer, Hash)>] Frame data, response status code and response headers
    def create_vault_configuration_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.create_vault_configuration ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.create_vault_configuration"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/configurations'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_configuration'])

      # return_type
      return_type = opts[:debug_return_type] || 'Frame'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.create_vault_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#create_vault_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Vault Key
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateVaultKeyBody] :create_vault_key_body application/json
    # @return [Frame]
    def create_vault_key(subscriptionid, opts = {})
      data, _status_code, _headers = create_vault_key_with_http_info(subscriptionid, opts)
      data
    end

    # Create Vault Key
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateVaultKeyBody] :create_vault_key_body application/json
    # @return [Array<(Frame, Integer, Hash)>] Frame data, response status code and response headers
    def create_vault_key_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.create_vault_key ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.create_vault_key"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/encryptionkeys'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_vault_key_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Frame'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.create_vault_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#create_vault_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Configuration
    # @param subscriptionid [String] Subscription ID
    # @param configid [String] config id
    # @param [Hash] opts the optional parameters
    # @return [Frame]
    def delete_configuration(subscriptionid, configid, opts = {})
      data, _status_code, _headers = delete_configuration_with_http_info(subscriptionid, configid, opts)
      data
    end

    # Delete Configuration
    # @param subscriptionid [String] Subscription ID
    # @param configid [String] config id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Frame, Integer, Hash)>] Frame data, response status code and response headers
    def delete_configuration_with_http_info(subscriptionid, configid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.delete_configuration ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.delete_configuration"
      end
      # verify the required parameter 'configid' is set
      if @api_client.config.client_side_validation && configid.nil?
        fail ArgumentError, "Missing the required parameter 'configid' when calling VaultApi.delete_configuration"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/configurations/{configid}'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s)).sub('{' + 'configid' + '}', CGI.escape(configid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Frame'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.delete_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#delete_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Vault Key
    # @param subscriptionid [String] Subscription ID
    # @param keyid [String] key id
    # @param [Hash] opts the optional parameters
    # @return [Frame]
    def delete_vault_key(subscriptionid, keyid, opts = {})
      data, _status_code, _headers = delete_vault_key_with_http_info(subscriptionid, keyid, opts)
      data
    end

    # Delete Vault Key
    # @param subscriptionid [String] Subscription ID
    # @param keyid [String] key id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Frame, Integer, Hash)>] Frame data, response status code and response headers
    def delete_vault_key_with_http_info(subscriptionid, keyid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.delete_vault_key ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.delete_vault_key"
      end
      # verify the required parameter 'keyid' is set
      if @api_client.config.client_side_validation && keyid.nil?
        fail ArgumentError, "Missing the required parameter 'keyid' when calling VaultApi.delete_vault_key"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/encryptionkeys/{keyid}'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s)).sub('{' + 'keyid' + '}', CGI.escape(keyid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Frame'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.delete_vault_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#delete_vault_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable Encryption
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [EnableEncryptionBody] :enable_encryption_body application/json
    # @return [Frame]
    def enable_encryption(subscriptionid, opts = {})
      data, _status_code, _headers = enable_encryption_with_http_info(subscriptionid, opts)
      data
    end

    # Enable Encryption
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [EnableEncryptionBody] :enable_encryption_body application/json
    # @return [Array<(Frame, Integer, Hash)>] Frame data, response status code and response headers
    def enable_encryption_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.enable_encryption ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.enable_encryption"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/encryption'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'enable_encryption_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Frame'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.enable_encryption",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#enable_encryption\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Exports
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [GetExportsResponse]
    def get_exports(subscriptionid, opts = {})
      data, _status_code, _headers = get_exports_with_http_info(subscriptionid, opts)
      data
    end

    # Get Exports
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetExportsResponse, Integer, Hash)>] GetExportsResponse data, response status code and response headers
    def get_exports_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.get_exports ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.get_exports"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/exports'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetExportsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.get_exports",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#get_exports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get vault folder data
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [FolderData]
    def get_registry_data(subscriptionid, opts = {})
      data, _status_code, _headers = get_registry_data_with_http_info(subscriptionid, opts)
      data
    end

    # Get vault folder data
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FolderData, Integer, Hash)>] FolderData data, response status code and response headers
    def get_registry_data_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.get_registry_data ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.get_registry_data"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/folders'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FolderData'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.get_registry_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#get_registry_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Replays
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [GetReplaysResponse]
    def get_replays(subscriptionid, opts = {})
      data, _status_code, _headers = get_replays_with_http_info(subscriptionid, opts)
      data
    end

    # Get Replays
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetReplaysResponse, Integer, Hash)>] GetReplaysResponse data, response status code and response headers
    def get_replays_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.get_replays ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.get_replays"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/replays'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetReplaysResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.get_replays",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#get_replays\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get vault Audit
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page Number
    # @option opts [Integer] :page_size Page Size
    # @return [AuditResult]
    def get_vault_audit(subscriptionid, opts = {})
      data, _status_code, _headers = get_vault_audit_with_http_info(subscriptionid, opts)
      data
    end

    # Get vault Audit
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_number Page Number
    # @option opts [Integer] :page_size Page Size
    # @return [Array<(AuditResult, Integer, Hash)>] AuditResult data, response status code and response headers
    def get_vault_audit_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.get_vault_audit ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.get_vault_audit"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/audit'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageNumber'] = opts[:'page_number'] if !opts[:'page_number'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuditResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.get_vault_audit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#get_vault_audit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get vault configurations
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [Configurations]
    def get_vault_configurations(subscriptionid, opts = {})
      data, _status_code, _headers = get_vault_configurations_with_http_info(subscriptionid, opts)
      data
    end

    # Get vault configurations
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Configurations, Integer, Hash)>] Configurations data, response status code and response headers
    def get_vault_configurations_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.get_vault_configurations ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.get_vault_configurations"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/configurations'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Configurations'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.get_vault_configurations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#get_vault_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get vault files
    # @param subscriptionid [String] Subscription ID
    # @param registryid [String] registry ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_type file type
    # @return [FileDetails]
    def get_vault_files(subscriptionid, registryid, opts = {})
      data, _status_code, _headers = get_vault_files_with_http_info(subscriptionid, registryid, opts)
      data
    end

    # Get vault files
    # @param subscriptionid [String] Subscription ID
    # @param registryid [String] registry ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_type file type
    # @return [Array<(FileDetails, Integer, Hash)>] FileDetails data, response status code and response headers
    def get_vault_files_with_http_info(subscriptionid, registryid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.get_vault_files ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.get_vault_files"
      end
      # verify the required parameter 'registryid' is set
      if @api_client.config.client_side_validation && registryid.nil?
        fail ArgumentError, "Missing the required parameter 'registryid' when calling VaultApi.get_vault_files"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/registry/{registryid}/files'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s)).sub('{' + 'registryid' + '}', CGI.escape(registryid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fileType'] = opts[:'file_type'] if !opts[:'file_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FileDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.get_vault_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#get_vault_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Vault Keys
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [GetKeysResponse]
    def get_vault_keys(subscriptionid, opts = {})
      data, _status_code, _headers = get_vault_keys_with_http_info(subscriptionid, opts)
      data
    end

    # Get Vault Keys
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetKeysResponse, Integer, Hash)>] GetKeysResponse data, response status code and response headers
    def get_vault_keys_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.get_vault_keys ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.get_vault_keys"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/encryptionkeys'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetKeysResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.get_vault_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#get_vault_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get vault metrics
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_time start time
    # @option opts [String] :end_time end time
    # @return [MetricsResponse]
    def get_vault_metrics(subscriptionid, opts = {})
      data, _status_code, _headers = get_vault_metrics_with_http_info(subscriptionid, opts)
      data
    end

    # Get vault metrics
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_time start time
    # @option opts [String] :end_time end time
    # @return [Array<(MetricsResponse, Integer, Hash)>] MetricsResponse data, response status code and response headers
    def get_vault_metrics_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.get_vault_metrics ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.get_vault_metrics"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/metrics'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MetricsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.get_vault_metrics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#get_vault_metrics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get vault status
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [VaultStatus]
    def get_vault_status(subscriptionid, opts = {})
      data, _status_code, _headers = get_vault_status_with_http_info(subscriptionid, opts)
      data
    end

    # Get vault status
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VaultStatus, Integer, Hash)>] VaultStatus data, response status code and response headers
    def get_vault_status_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.get_vault_status ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.get_vault_status"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/status'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VaultStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.get_vault_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#get_vault_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set Retention Period
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [SetRetentionBody] :set_retention_body application/json
    # @return [Frame]
    def set_retention(subscriptionid, opts = {})
      data, _status_code, _headers = set_retention_with_http_info(subscriptionid, opts)
      data
    end

    # Set Retention Period
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [SetRetentionBody] :set_retention_body application/json
    # @return [Array<(Frame, Integer, Hash)>] Frame data, response status code and response headers
    def set_retention_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.set_retention ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.set_retention"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/retention'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'set_retention_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Frame'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.set_retention",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#set_retention\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Export
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [StartExportBody] :start_export_body application/json
    # @return [Frame]
    def start_export(subscriptionid, opts = {})
      data, _status_code, _headers = start_export_with_http_info(subscriptionid, opts)
      data
    end

    # Start Export
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [StartExportBody] :start_export_body application/json
    # @return [Array<(Frame, Integer, Hash)>] Frame data, response status code and response headers
    def start_export_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.start_export ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.start_export"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/exports'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'start_export_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Frame'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.start_export",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#start_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Replay
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [ReplayBody] :replay_body application/json
    # @return [String]
    def start_replay(subscriptionid, opts = {})
      data, _status_code, _headers = start_replay_with_http_info(subscriptionid, opts)
      data
    end

    # Start Replay
    # @param subscriptionid [String] Subscription ID
    # @param [Hash] opts the optional parameters
    # @option opts [ReplayBody] :replay_body application/json
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def start_replay_with_http_info(subscriptionid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VaultApi.start_replay ...'
      end
      # verify the required parameter 'subscriptionid' is set
      if @api_client.config.client_side_validation && subscriptionid.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptionid' when calling VaultApi.start_replay"
      end
      # resource path
      local_var_path = '/vault/subscriptions/{subscriptionid}/replays'.sub('{' + 'subscriptionid' + '}', CGI.escape(subscriptionid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'replay_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"VaultApi.start_replay",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultApi#start_replay\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
