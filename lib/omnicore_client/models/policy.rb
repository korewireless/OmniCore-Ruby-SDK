=begin
#OmniCore Model and State Management API

#This is an OmniCore Model and State Management server.

The version of the OpenAPI document: 1.8.5
Contact: omnicoresupport@korewireless.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0-SNAPSHOT

=end

require 'date'
require 'time'

module OmniCoreClient
  class Policy
    attr_accessor :connect

    attr_accessor :publish_state

    attr_accessor :publish_events

    attr_accessor :publish_events_regex

    attr_accessor :publish_loopback

    attr_accessor :subscribe_command

    attr_accessor :subscribe_command_regex

    attr_accessor :subscribe_broadcast

    attr_accessor :subscribe_broadcast_regex

    attr_accessor :subscribe_config

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'connect' => :'Connect',
        :'publish_state' => :'PublishState',
        :'publish_events' => :'PublishEvents',
        :'publish_events_regex' => :'PublishEventsRegex',
        :'publish_loopback' => :'PublishLoopback',
        :'subscribe_command' => :'SubscribeCommand',
        :'subscribe_command_regex' => :'SubscribeCommandRegex',
        :'subscribe_broadcast' => :'SubscribeBroadcast',
        :'subscribe_broadcast_regex' => :'SubscribeBroadcastRegex',
        :'subscribe_config' => :'SubscribeConfig'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'connect' => :'Boolean',
        :'publish_state' => :'Boolean',
        :'publish_events' => :'Boolean',
        :'publish_events_regex' => :'String',
        :'publish_loopback' => :'Boolean',
        :'subscribe_command' => :'Boolean',
        :'subscribe_command_regex' => :'String',
        :'subscribe_broadcast' => :'Boolean',
        :'subscribe_broadcast_regex' => :'String',
        :'subscribe_config' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OmniCoreClient::Policy` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OmniCoreClient::Policy`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'connect')
        self.connect = attributes[:'connect']
      end

      if attributes.key?(:'publish_state')
        self.publish_state = attributes[:'publish_state']
      end

      if attributes.key?(:'publish_events')
        self.publish_events = attributes[:'publish_events']
      end

      if attributes.key?(:'publish_events_regex')
        self.publish_events_regex = attributes[:'publish_events_regex']
      end

      if attributes.key?(:'publish_loopback')
        self.publish_loopback = attributes[:'publish_loopback']
      end

      if attributes.key?(:'subscribe_command')
        self.subscribe_command = attributes[:'subscribe_command']
      end

      if attributes.key?(:'subscribe_command_regex')
        self.subscribe_command_regex = attributes[:'subscribe_command_regex']
      end

      if attributes.key?(:'subscribe_broadcast')
        self.subscribe_broadcast = attributes[:'subscribe_broadcast']
      end

      if attributes.key?(:'subscribe_broadcast_regex')
        self.subscribe_broadcast_regex = attributes[:'subscribe_broadcast_regex']
      end

      if attributes.key?(:'subscribe_config')
        self.subscribe_config = attributes[:'subscribe_config']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @connect.nil?
        invalid_properties.push('invalid value for "connect", connect cannot be nil.')
      end

      if @publish_state.nil?
        invalid_properties.push('invalid value for "publish_state", publish_state cannot be nil.')
      end

      if @publish_events.nil?
        invalid_properties.push('invalid value for "publish_events", publish_events cannot be nil.')
      end

      if @publish_events_regex.nil?
        invalid_properties.push('invalid value for "publish_events_regex", publish_events_regex cannot be nil.')
      end

      if @publish_loopback.nil?
        invalid_properties.push('invalid value for "publish_loopback", publish_loopback cannot be nil.')
      end

      if @subscribe_command.nil?
        invalid_properties.push('invalid value for "subscribe_command", subscribe_command cannot be nil.')
      end

      if @subscribe_command_regex.nil?
        invalid_properties.push('invalid value for "subscribe_command_regex", subscribe_command_regex cannot be nil.')
      end

      if @subscribe_broadcast.nil?
        invalid_properties.push('invalid value for "subscribe_broadcast", subscribe_broadcast cannot be nil.')
      end

      if @subscribe_broadcast_regex.nil?
        invalid_properties.push('invalid value for "subscribe_broadcast_regex", subscribe_broadcast_regex cannot be nil.')
      end

      if @subscribe_config.nil?
        invalid_properties.push('invalid value for "subscribe_config", subscribe_config cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @connect.nil?
      return false if @publish_state.nil?
      return false if @publish_events.nil?
      return false if @publish_events_regex.nil?
      return false if @publish_loopback.nil?
      return false if @subscribe_command.nil?
      return false if @subscribe_command_regex.nil?
      return false if @subscribe_broadcast.nil?
      return false if @subscribe_broadcast_regex.nil?
      return false if @subscribe_config.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          connect == o.connect &&
          publish_state == o.publish_state &&
          publish_events == o.publish_events &&
          publish_events_regex == o.publish_events_regex &&
          publish_loopback == o.publish_loopback &&
          subscribe_command == o.subscribe_command &&
          subscribe_command_regex == o.subscribe_command_regex &&
          subscribe_broadcast == o.subscribe_broadcast &&
          subscribe_broadcast_regex == o.subscribe_broadcast_regex &&
          subscribe_config == o.subscribe_config
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [connect, publish_state, publish_events, publish_events_regex, publish_loopback, subscribe_command, subscribe_command_regex, subscribe_broadcast, subscribe_broadcast_regex, subscribe_config].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OmniCoreClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
